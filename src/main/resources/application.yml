server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful
spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000 #Timeout on waiting to connect to the config server (ms)
      request-read-timeout: 5000 #Timeout on waiting to read configuration data from the config server (ms)
      fail-fast: false #Makes a failure to connect to the config server fatal
    gateway:
      routes: #A list of route definitions
        - id: catalog-route #The route ID
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/** #The predicate is a path to match
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders #The URI value comes from an environment variable, or else from the default
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - SaveSession
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException,java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
  resilience4j:
    circuitbreaker:
      configs:
        default:
          slidingWindowSize: 20
          permittedNumberOfCallsInHalfOpenState: 5
          failureRateThreshold: 50
          waitDurationInOpenState: 15000
    timelimiter:
      configs:
        default:
          timeoutDuration: 5s
    logging:
      level:
      io.github.resilience4j: DEBUG
  redis:
    connect-timeout: 2s
    host: localhost
    port: 6379
    timeout: 1s
  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge