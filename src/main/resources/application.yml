server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful
spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge
  cloud:
    gateway:
      routes: #A list of route definitions
        - id: catalog-route #The route ID
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/** #The predicate is a path to match
          #adding filters to register circuit breaker
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders #The URI value comes from an environment variable, or else from the default
          predicates:
            - Path=/orders/**
          #adding filters to register circuit breaker
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
                # no fall back defined fothis circuit breaker
      # declaring filters
      default-filters: # list of default filters
        - SaveSession
        - name: Retry #name of the filter
          args:
            retries: 3 #maximun retry attempts
            methods: GET # retries only get requests
            series: SERVER_ERROR # retries only when 5xx errors
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException # retry only when given exceptions are thrown
            backoff: # Retries with a delay computed as “firstBackoff * (factor ^ n)”
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
      ## below lines are the config for timeouts on gateway
      httpclient: # Configuration properties for the HTTP client
        connect-timeout: 2000 #Time limit for a connection to be established (in ms)
        response-timeout: 5s #Time limit for a response to be received (Duration)
        #configuring coneection pool
        pool:
          type: elastic #Type of connection pool (elastic, fixed, or disabled)
          max-idle-time: 15s # Idle time after which the communication channel will be closed
          max-life-time: 60s # Time after which the communication channel will be closed
# resilence4j config
resilience4j:
  circuitbreaker:
    configs:
      default: #Default configuration bean for all circuit breakers
        slidingWindowSize: 20 #The size of the sliding window used to record the outcome of calls when the circuit is closed
        permittedNumberOfCallsInHalfOpenState: 5 # Number of permitted calls when the circuit is half-open
        failureRateThreshold: 50 # When the failure rate is above the threshold, the circuit becomes open.
        waitDurationInOpenState: 15000 #Waiting time before moving from open to half-open (ms)
  timelimiter:
    configs:
      default: # Default configuration bean for all time limiters
        timeoutDuration: 5s # Default configuration bean for all time limiters
logging:
  level:
    io.github.resilience4j: DEBUG
  redis:
    connect-timeout: 2s
    host: localhost
    port: 6379
    timeout: 1s